.TH "bleBatteryLevel" 3 "Sun Mar 9 2014" "Version v1.0.2" "uCXpresso.BLE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
bleBatteryLevel \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include 'class/ble_battery\&.h'\fP
.PP
Inherits \fBCPeripheral\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBbleBatteryLevel\fP (\fBbleSerial\fP &ble)"
.br
.ti -1c
.RI "virtual bool \fBreadSystemVoltage\fP (float &voltage)"
.br
.ti -1c
.RI "virtual bool \fBsendBatteryLevel\fP (uint8_t level)"
.br
.ti -1c
.RI "virtual bool \fBisAvailable\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBbleSerial\fP * \fBm_ble\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
The \fBbleBatteryLevel\fP class exposes the state of a battery within a device\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "bleBatteryLevel::bleBatteryLevel (\fBbleSerial\fP &ble)"
\fBbleBatteryLevel\fP constructor\&. 
.PP
.nf
int main() {
        \&.\&.\&.
        bleSerial ble("myBLE");
        ble\&.enable();
        \&.\&.\&.
        bleBatteryLevel bat(ble);
        \&.\&.\&.
        float val;
        uint8_t level;

        if ( bat\&.readSystemVoltage(val) ) {
         level = map(val, 2\&.0f, 3\&.3f, 0, 100);
         bat\&.sendBatteryLevel(level);
        }
        \&.\&.\&.

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIble\fP is a \fBbleSerial\fP class object\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "virtual bool bleBatteryLevel::readSystemVoltage (float &voltage)\fC [virtual]\fP"
Use readSystemVoltage to retrieve the voltage of system (V3\&.3)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvoltage\fP is a float type data to receive the system voltage\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
true, if read system voltage successful\&. otherwise, read failed\&. 
.RE
.PP

.SS "virtual bool bleBatteryLevel::sendBatteryLevel (uint8_tlevel)\fC [virtual]\fP"
Use sendBatteryLevel to send the battery level to remote (App)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlevel\fP is an unit8_t type integer to indicate the battery level percentage\&. (0~100%) 
.RE
.PP
\fBReturns:\fP
.RS 4
true, if send battery level successful\&. otherwise, if send failed\&. 
.RE
.PP

.SS "virtual bool bleBatteryLevel::isAvailable ()\fC [virtual]\fP"
Use isAvailable to check the service whether opened by remote (App)\&. 
.PP
\fBReturns:\fP
.RS 4
true, if service is available\&. otherwise, the service is not in used\&. 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "\fBbleSerial\fP* bleBatteryLevel::m_ble\fC [protected]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for uCXpresso\&.BLE from the source code\&.
