.TH "Console" 3 "Sun Mar 9 2014" "Version v1.0.2" "uCXpresso.BLE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Console \- 
.PP
The \fBConsole\fP class provides a lightweight input/output stream to console\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include 'class/console\&.h'\fP
.PP
Inherits \fBCSmallPrintf\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBConsole\fP (\fBCStream\fP &io)"
.br
.ti -1c
.RI "virtual bool \fBisConnected\fP ()"
.br
.ti -1c
.RI "virtual void \fBecho\fP (bool set)"
.br
.ti -1c
.RI "virtual void \fBclear\fP ()"
.br
.ti -1c
.RI "virtual int \fBputchar\fP (int ch)"
.br
.ti -1c
.RI "virtual int \fBgetchar\fP ()"
.br
.ti -1c
.RI "virtual int \fBputstr\fP (LPCTSTR str)"
.br
.ti -1c
.RI "virtual int \fBgetstr\fP (LPTSTR strbuf, size_t size)"
.br
.ti -1c
.RI "virtual int \fBwrite\fP (const void *buf, int size)"
.br
.ti -1c
.RI "virtual int \fBread\fP (void *buf, int size)"
.br
.ti -1c
.RI "virtual void \fBoperator>>\fP (char &ch)"
.br
.ti -1c
.RI "virtual void \fBoperator>>\fP (uint8_t &b)"
.br
.ti -1c
.RI "virtual \fBConsole\fP & \fBoperator<<\fP (TCHAR ch)"
.br
.ti -1c
.RI "virtual \fBConsole\fP & \fBoperator<<\fP (LPCTSTR str)"
.br
.ti -1c
.RI "virtual \fBConsole\fP & \fBoperator<<\fP (int val)"
.br
.ti -1c
.RI "virtual \fBConsole\fP & \fBoperator<<\fP (float val)"
.br
.ti -1c
.RI "virtual \fBConsole\fP & \fBoperator<<\fP (double val)"
.br
.ti -1c
.RI "virtual \fBConsole\fP & \fBoperator<<\fP (size_t val)"
.br
.ti -1c
.RI "virtual \fBConsole\fP & \fBoperator<<\fP (uint16_t val)"
.br
.ti -1c
.RI "virtual \fBConsole\fP & \fBoperator<<\fP (uint32_t val)"
.br
.ti -1c
.RI "virtual \fBConsole\fP & \fBoperator<<\fP (uint8_t val)"
.br
.ti -1c
.RI "virtual \fBConsole\fP & \fBoperator<<\fP (CONSOLE_CTRL_T ctrl)"
.br
.ti -1c
.RI "\fBCStream\fP * \fBiStream\fP ()"
.br
.ti -1c
.RI "\fBCStream\fP * \fBoStream\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
The \fBConsole\fP class provides a lightweight input/output stream to console\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Console::Console (\fBCStream\fP &io)"
Constructs a console object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIio\fP is a \fBCStream\fP object to provide the input/output stream\&.
.RE
.PP
.PP
.nf
Example:
        CSerial cdc(USB);       // create an USB serial stream object\&.
        Console con(cdc);       // create a console by the USB stream\&.

        if ( con\&.isConnected() ) {
            con << "Hello World" << endl;
        }
.fi
.PP
 
.SH "Member Function Documentation"
.PP 
.SS "virtual bool Console::isConnected ()\fC [virtual]\fP"
Call the member function to check the stream is ready to read (or write)\&.
.PP
.PP
.nf
Example:
        CSerial cdc(USB);       // create an USB serial stream object\&.
        Console con(cdc);       // create a console by the USB stream\&.

        if ( con\&.isConnected() ) {
            con << "Hello World" << endl;
        }
.fi
.PP
 
.SS "virtual void Console::echo (boolset)\fC [virtual]\fP"
Call the member function to enable or disable the echo\&. 
.PP
\fBParameters:\fP
.RS 4
\fIset\fP is a boolean value, set true to enable the echo\&. 
.RE
.PP

.SS "virtual void Console::clear ()\fC [virtual]\fP"
Call the member function to clear the screen of console\&. 
.SS "virtual int Console::putchar (intch)\fC [inline]\fP, \fC [virtual]\fP"
Call the member function to put a character to the serial stream of console\&. 
.PP
\fBParameters:\fP
.RS 4
\fIch\fP is a integer value of character\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the same value, if put a character successful; 
.RE
.PP

.SS "virtual int Console::getchar ()\fC [inline]\fP, \fC [virtual]\fP"
Call the member function to get a character from the serial stream of console\&. 
.PP
\fBReturns:\fP
.RS 4
the received character\&. 
.RE
.PP

.SS "virtual int Console::putstr (LPCTSTRstr)\fC [virtual]\fP"
Call the member function to put a string to console\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP is a string pointer to be written\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the how many character sent\&. 
.RE
.PP

.SS "virtual int Console::getstr (LPTSTRstrbuf, size_tsize)\fC [virtual]\fP"
Call the member function to get a string from the serial stream of console\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstrbuf\fP is a string pointer where the string stored\&. 
.br
\fIsize\fP is a size_t to represent the size of strbuf to be read\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the how many characters received\&. 
.RE
.PP

.SS "virtual int Console::write (const void *buf, intsize)\fC [virtual]\fP"
Call the member function to write a block buffer to the serial stream of console\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbuf\fP is a pointer to a block data with the content to be written\&. 
.br
\fIsize\fP is a integer value to specified the size of block to write\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the how many bytes to write\&. 
.RE
.PP

.SS "virtual int Console::read (void *buf, intsize)\fC [virtual]\fP"
Call the member function to read a block buffer from the serial stream of console\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbuf\fP is a pointer to a block data where the content read will be stored\&. 
.br
\fIsize\fP is integer value to represent the size of block to be read\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the how many byte to be read\&. 
.RE
.PP

.SS "virtual void Console::operator>> (char &ch)\fC [virtual]\fP"
A shorthand for read a character\&.
.PP
.PP
.nf
Examle:
        char c;
        con >> c;
.fi
.PP
 
.SS "virtual void Console::operator>> (uint8_t &b)\fC [virtual]\fP"
A shorthand for read a byte value\&.
.PP
.PP
.nf
Example:
        byte c;
        con >> c;
.fi
.PP
 
.SS "virtual \fBConsole\fP& Console::operator<< (TCHARch)\fC [virtual]\fP"
A shorthand for write a character to console\&. 
.PP
\fBReturns:\fP
.RS 4
*this\&.
.RE
.PP
.PP
.nf
Example:
        con << '?' << "Whate is it this year? " << 2012 << endl;
.fi
.PP
 
.SS "virtual \fBConsole\fP& Console::operator<< (LPCTSTRstr)\fC [virtual]\fP"
A shorthand for write a string to console\&. 
.PP
\fBReturns:\fP
.RS 4
*this\&.
.RE
.PP
.PP
.nf
Example:
        con << '?' << "Whate is it this year? " << 2012 << endl;
.fi
.PP
 
.SS "virtual \fBConsole\fP& Console::operator<< (intval)\fC [inline]\fP, \fC [virtual]\fP"
A shorthand for write a integer value to console\&. 
.PP
\fBReturns:\fP
.RS 4
*this\&.
.RE
.PP
.PP
.nf
Example:
        con << '?' << "Whate is it this year? " << 2012 << endl;
.fi
.PP
 
.SS "virtual \fBConsole\fP& Console::operator<< (floatval)\fC [inline]\fP, \fC [virtual]\fP"
A shorthand for write a float value to console\&. 
.PP
\fBReturns:\fP
.RS 4
*this\&. 
.RE
.PP

.SS "virtual \fBConsole\fP& Console::operator<< (doubleval)\fC [inline]\fP, \fC [virtual]\fP"
A shorthand for write a double value to console\&. 
.PP
\fBReturns:\fP
.RS 4
*this\&. 
.RE
.PP

.SS "virtual \fBConsole\fP& Console::operator<< (size_tval)\fC [inline]\fP, \fC [virtual]\fP"
A shorthand for write a size_t value to console\&. 
.PP
\fBReturns:\fP
.RS 4
*this; 
.RE
.PP

.SS "virtual \fBConsole\fP& Console::operator<< (uint16_tval)\fC [inline]\fP, \fC [virtual]\fP"
A shorthand for write a unsigned integer 16 bits value to console\&. 
.PP
\fBReturns:\fP
.RS 4
*this\&. 
.RE
.PP

.SS "virtual \fBConsole\fP& Console::operator<< (uint32_tval)\fC [inline]\fP, \fC [virtual]\fP"

.SS "virtual \fBConsole\fP& Console::operator<< (uint8_tval)\fC [inline]\fP, \fC [virtual]\fP"
A shorthand for write a unsigned integer 8 bits value to console\&. 
.PP
\fBReturns:\fP
.RS 4
*this\&. 
.RE
.PP

.SS "virtual \fBConsole\fP& Console::operator<< (CONSOLE_CTRL_Tctrl)\fC [virtual]\fP"
A shorthand for write a control operator to console\&. 
.PP
\fBReturns:\fP
.RS 4
*this;
.RE
.PP
.PP
.nf
Example:
        con << '?' << "Whate is it this year? " << 2012 << endl;
.fi
.PP
 
.SS "\fBCStream\fP* Console::iStream ()\fC [inline]\fP"
Call the member function to retrieve the input stream\&. 
.PP
\fBReturns:\fP
.RS 4
a \fBCStream\fP object for input\&. 
.RE
.PP

.SS "\fBCStream\fP* Console::oStream ()\fC [inline]\fP"
Call the member function to retrieve the output stream\&. 
.PP
\fBReturns:\fP
.RS 4
a CStrea object for output\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for uCXpresso\&.BLE from the source code\&.
