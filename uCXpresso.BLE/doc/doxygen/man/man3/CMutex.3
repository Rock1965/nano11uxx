.TH "CMutex" 3 "Sun Mar 9 2014" "Version v1.0.2" "uCXpresso.BLE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CMutex \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include 'class/mutex\&.h'\fP
.PP
Inherits \fBCObject\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBlock\fP ()"
.br
.ti -1c
.RI "virtual bool \fBtryLock\fP (uint32_t delay=0)"
.br
.ti -1c
.RI "virtual void \fBunlock\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
Use the \fBCMutex\fP class to lock or unlock a resource\&. 
.PP
\fBNote:\fP
.RS 4
Mutexes and binary semaphores are very similar but have some subtle differences: Mutexes include a priority inheritance mechanism, binary semaphores do not\&. This makes binary semaphores the better choice for implementing synchronisation (between tasks or between tasks and an interrupt), and mutexes the better choice for implementing simple mutual exclusion\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "virtual void CMutex::lock ()\fC [virtual]\fP"
Call the member function to lock (take semaphore) a resource with block when resource in used\&.
.PP
.PP
.nf
Example:
        CMutex mutex;

        CSerial cdc(USB);
        Console (cdc);

        class Task1: public CThread {
        protected:
            virtual void run() {
            while(1) {
                if ( cdc\&.isConnected() ) {
                    mutex\&.lock();
                    con << "1111111111" << endl;
                    mutex\&.unlock();
                }
            }
            }
        };

        class Task2: public CThread {
        protected:
            virtual void run() {
            while(1) {
                if ( cdc\&.isConnected() ) {
                    mutex\&.lock();
                    con << "2222222222" << endl;
                    mutex\&.unlock();
                }
            }
            }
        };
.fi
.PP
 
.SS "virtual bool CMutex::tryLock (uint32_tdelay = \fC0\fP)\fC [virtual]\fP"
Call the member function to lock (take) a resource without block when resource in used\&. 
.PP
\fBReturns:\fP
.RS 4
true if lock successful; otherwise, failed\&. 
.RE
.PP

.SS "virtual void CMutex::unlock ()\fC [virtual]\fP"
Call the member function to unlock (release) a resource\&.
.PP
.PP
.nf
Example:
        CMutex mutex;

        CSerial cdc(USB);
        Console (cdc);

        class Task1: public CThread {
        protected:
            virtual void run() {
            while(1) {
                if ( cdc\&.isConnected() ) {
                    mutex\&.lock();
                    con << "1111111111" << endl;
                    mutex\&.unlock();
                }
            }
            }
        };

        class Task2: public CThread {
        protected:
            virtual void run() {
            while(1) {
                if ( cdc\&.isConnected() ) {
                    mutex\&.lock();
                    con << "2222222222" << endl;
                    mutex\&.unlock();
                }
            }
            }
        };
.fi
.PP
 

.SH "Author"
.PP 
Generated automatically by Doxygen for uCXpresso\&.BLE from the source code\&.
