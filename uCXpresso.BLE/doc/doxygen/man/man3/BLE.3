.TH "BLE" 3 "Sun Mar 9 2014" "Version v1.0.2" "uCXpresso.BLE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BLE \- 
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBbleBatteryLevel\fP"
.br
.ti -1c
.RI "class \fBbleHeartRate\fP"
.br
.ti -1c
.RI "class \fBbleHealthThermometer\fP"
.br
.ti -1c
.RI "class \fBbleProximity\fP"
.br
.ti -1c
.RI "class \fBbleSerial\fP"
.br
.RI "\fI\fBbleSerial\fP class is a ble core, and inherit from \fBCStream\fP class to provide the stream virtual functions for serial input and output\&. the \fBbleSerial\fP class also inherit from the \fBCThread\fP class and can work in background\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
BLE is meant the Bluetooth Low Energy 
.SH "Class Documentation"
.PP 
.SH "class bleBatteryLevel"
.PP 
The \fBbleBatteryLevel\fP class exposes the state of a battery within a device\&. 
.PP
Inherits \fBCPeripheral\fP\&.
.PP
.in -1c
.RI "\fBPublic Member Functions\fP"
.in +1c

.in +1c
.ti -1c
.RI "\fBbleBatteryLevel\fP (\fBbleSerial\fP &ble)"
.br
.ti -1c
.RI "virtual bool \fBreadSystemVoltage\fP (float &voltage)"
.br
.ti -1c
.RI "virtual bool \fBsendBatteryLevel\fP (uint8_t level)"
.br
.ti -1c
.RI "virtual bool \fBisAvailable\fP ()"
.br
.in -1c
.PP
.in -1c
.RI "\fBProtected Attributes\fP"
.in +1c

.in +1c
.ti -1c
.RI "\fBbleSerial\fP * \fBm_ble\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "bleBatteryLevel::bleBatteryLevel (\fBbleSerial\fP &ble)"
\fBbleBatteryLevel\fP constructor\&. 
.PP
.nf
int main() {
        \&.\&.\&.
        bleSerial ble("myBLE");
        ble\&.enable();
        \&.\&.\&.
        bleBatteryLevel bat(ble);
        \&.\&.\&.
        float val;
        uint8_t level;

        if ( bat\&.readSystemVoltage(val) ) {
         level = map(val, 2\&.0f, 3\&.3f, 0, 100);
         bat\&.sendBatteryLevel(level);
        }
        \&.\&.\&.

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIble\fP is a \fBbleSerial\fP class object\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "virtual bool bleBatteryLevel::readSystemVoltage (float &voltage)\fC [virtual]\fP"
Use readSystemVoltage to retrieve the voltage of system (V3\&.3)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvoltage\fP is a float type data to receive the system voltage\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
true, if read system voltage successful\&. otherwise, read failed\&. 
.RE
.PP

.SS "virtual bool bleBatteryLevel::sendBatteryLevel (uint8_tlevel)\fC [virtual]\fP"
Use sendBatteryLevel to send the battery level to remote (App)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlevel\fP is an unit8_t type integer to indicate the battery level percentage\&. (0~100%) 
.RE
.PP
\fBReturns:\fP
.RS 4
true, if send battery level successful\&. otherwise, if send failed\&. 
.RE
.PP

.SS "virtual bool bleBatteryLevel::isAvailable ()\fC [virtual]\fP"
Use isAvailable to check the service whether opened by remote (App)\&. 
.PP
\fBReturns:\fP
.RS 4
true, if service is available\&. otherwise, the service is not in used\&. 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "\fBbleSerial\fP* bleBatteryLevel::m_ble\fC [protected]\fP"

.SH "class bleHeartRate"
.PP 
The bleHearRate class exposes heart rate and other data from a Heart Rate Sensor intended for fitness applications\&. 
.PP
Inherits \fBCPeripheral\fP\&.
.PP
.in -1c
.RI "\fBPublic Member Functions\fP"
.in +1c

.in +1c
.ti -1c
.RI "\fBbleHeartRate\fP (\fBbleSerial\fP &ble)"
.br
.ti -1c
.RI "virtual bool \fBisAvailable\fP ()"
.br
.ti -1c
.RI "void \fBsupportContact\fP (bool enable)"
.br
.ti -1c
.RI "void \fBcontactStatus\fP (bool enable)"
.br
.ti -1c
.RI "void \fBsetSensorLocation\fP (hrsl_code_t code)"
.br
.ti -1c
.RI "bool \fBsendMeasure\fP (uint8_t meas_hr)"
.br
.RI "\fIOverload function to send a heart rate measurement (8 bits)\&. \fP"
.ti -1c
.RI "bool \fBsendMeasure\fP (uint16_t meas_hr)"
.br
.RI "\fIFunction to send a heart rate measurement (16 bits)\&. \fP"
.ti -1c
.RI "bool \fBsendMeasure\fP (uint8_t meas_hr, uint16_t expended_energy)"
.br
.RI "\fIOverload function to send a heart rate measurement (8 bits) with expended energy\&. \fP"
.ti -1c
.RI "bool \fBsendMeasure\fP (uint16_t meas_hr, uint16_t expended_energy)"
.br
.RI "\fIOverload function to send a heart rate measurement (16 bits) with expended energy\&. \fP"
.ti -1c
.RI "bool \fBsendMeasure\fP (uint8_t meas_hr, uint16_t *p_rr_intervals, uint8_t nb_intervals)"
.br
.RI "\fIOverload function to send a heart rate measurement (8 bits) with rr_intervals\&. \fP"
.ti -1c
.RI "bool \fBsendMeasure\fP (uint16_t meas_hr, uint16_t *p_rr_intervals, uint8_t nb_intervals)"
.br
.RI "\fIOverload function to send a heart rate measurement (16 bits) with rr_intervals\&. \fP"
.ti -1c
.RI "bool \fBsendMeasure\fP (uint8_t meas_hr, uint16_t expended_energy, uint16_t *p_rr_intervals, uint8_t nb_intervals)"
.br
.RI "\fIOverload function to send a heart rate measurement (8 bits) with expended energy with rr_intervals\&. \fP"
.ti -1c
.RI "bool \fBsendMeasure\fP (uint16_t meas_hr, uint16_t expended_energy, uint16_t *p_rr_intervals, uint8_t nb_intervals)"
.br
.RI "\fIOverload function to send a heart rate measurement (16 bits) with expended energy with rr_intervals\&. \fP"
.ti -1c
.RI "virtual void \fBonResetEnergyExpended\fP ()"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "bleHeartRate::bleHeartRate (\fBbleSerial\fP &ble)"
\fBbleHeartRate\fP constructor 
.PP
.nf
int main() {
\&.\&.\&.
    bleSerial ble("myBLE");
    ble\&.enable();

    bleHeartRate hr(ble);
    hr\&.sendMeasure(BPM);
 \&.\&.\&.

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIble\fP is a \fBbleSerial\fP class object\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "virtual bool bleHeartRate::isAvailable ()\fC [virtual]\fP"
Use isAvailable to check the service whether opened by remote (App)\&. 
.PP
\fBReturns:\fP
.RS 4
true, if service is available\&. otherwise, the service is not in used\&. 
.RE
.PP

.SS "void bleHeartRate::supportContact (boolenable)"
Set supported Contact sensor feature 
.PP
\fBParameters:\fP
.RS 4
\fIenable\fP true, if support the contact sensor\&. otherwise, no contact sensor supported\&. 
.RE
.PP

.SS "void bleHeartRate::contactStatus (boolenable)"
Set contact sensor status\&. 
.PP
\fBParameters:\fP
.RS 4
\fIenable\fP is a boolean value, set true, if contact is detected\&. otherwise, contact is not detected\&. 
.RE
.PP

.SS "void bleHeartRate::setSensorLocation (hrsl_code_tcode)"
Set sensor location\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcode\fP is a hrsl_code_t enumeration\&. 
.RE
.PP

.SS "bool bleHeartRate::sendMeasure (uint8_tmeas_hr)"

.PP
Overload function to send a heart rate measurement (8 bits)\&. 
.PP
\fBParameters:\fP
.RS 4
\fImeas_hr\fP Measured heart_rate to send\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
: True when the command send successfully\&. 
.RE
.PP

.SS "bool bleHeartRate::sendMeasure (uint16_tmeas_hr)"

.PP
Function to send a heart rate measurement (16 bits)\&. 
.PP
\fBParameters:\fP
.RS 4
\fImeas_hr\fP Measured heart_rate to send\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
: True when the command send successfully\&. 
.RE
.PP

.SS "bool bleHeartRate::sendMeasure (uint8_tmeas_hr, uint16_texpended_energy)"

.PP
Overload function to send a heart rate measurement (8 bits) with expended energy\&. 
.PP
\fBParameters:\fP
.RS 4
\fImeas_hr\fP Measured heart_rate to send\&. 
.br
\fIexpended_energy\fP Measured expended energy\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
: True when the command send successfully\&. 
.RE
.PP

.SS "bool bleHeartRate::sendMeasure (uint16_tmeas_hr, uint16_texpended_energy)"

.PP
Overload function to send a heart rate measurement (16 bits) with expended energy\&. 
.PP
\fBParameters:\fP
.RS 4
\fImeas_hr\fP Measured heart_rate to send\&. 
.br
\fIexpended_energy\fP Measured expended energy\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
: True when the command send successfully\&. 
.RE
.PP

.SS "bool bleHeartRate::sendMeasure (uint8_tmeas_hr, uint16_t *p_rr_intervals, uint8_tnb_intervals)"

.PP
Overload function to send a heart rate measurement (8 bits) with rr_intervals\&. 
.PP
\fBParameters:\fP
.RS 4
\fImeas_hr\fP Measured heart_rate to send\&. 
.br
\fIp_rr_intervals\fP Pointer to rr_intervals values\&. 
.br
\fInb_intervals\fP Number of rr_intervals\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
: True when the command send successfully\&. 
.RE
.PP

.SS "bool bleHeartRate::sendMeasure (uint16_tmeas_hr, uint16_t *p_rr_intervals, uint8_tnb_intervals)"

.PP
Overload function to send a heart rate measurement (16 bits) with rr_intervals\&. 
.PP
\fBParameters:\fP
.RS 4
\fImeas_hr\fP Measured heart_rate to send\&. 
.br
\fIp_rr_intervals\fP Pointer to rr_intervals values\&. 
.br
\fInb_intervals\fP Number of rr_intervals\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
: True when the command send successfully\&. 
.RE
.PP

.SS "bool bleHeartRate::sendMeasure (uint8_tmeas_hr, uint16_texpended_energy, uint16_t *p_rr_intervals, uint8_tnb_intervals)"

.PP
Overload function to send a heart rate measurement (8 bits) with expended energy with rr_intervals\&. 
.PP
\fBParameters:\fP
.RS 4
\fImeas_hr\fP Measured heart_rate to send\&. 
.br
\fIexpended_energy\fP Measured expended energy\&. 
.br
\fIp_rr_intervals\fP Pointer to rr_intervals values\&. 
.br
\fInb_intervals\fP Number of rr_intervals\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
: True when the command send successfully\&. 
.RE
.PP

.SS "bool bleHeartRate::sendMeasure (uint16_tmeas_hr, uint16_texpended_energy, uint16_t *p_rr_intervals, uint8_tnb_intervals)"

.PP
Overload function to send a heart rate measurement (16 bits) with expended energy with rr_intervals\&. 
.PP
\fBParameters:\fP
.RS 4
\fImeas_hr\fP measured heart_rate to send\&. 
.br
\fIexpended_energy\fP Measured expended energy\&. 
.br
\fIp_rr_intervals\fP Pointer to rr_intervals values\&. 
.br
\fInb_intervals\fP Number of rr_intervals\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
: True when the command send successfully\&. 
.RE
.PP

.SS "virtual void bleHeartRate::onResetEnergyExpended ()\fC [inline]\fP, \fC [virtual]\fP"
On reset energy expended event call by BLE task when receive remote (App) command\&. 
.PP
\fBNote:\fP
.RS 4
The onResetEnergyExpended is a virtual empty function, and implement by child class\&. 
.RE
.PP

.SH "class bleHealthThermometer"
.PP 
The \fBbleHealthThermometer\fP class exposes temperature and other data from a thermometer intended for healthcare and fitness applications\&. 
.PP
Inherits \fBCPeripheral\fP\&.
.PP
.in -1c
.RI "\fBPublic Types\fP"
.in +1c

.in +1c
.ti -1c
.RI "enum \fBh_temp_type_t\fP { \fBH_TYPE_NOT_INCLUDED\fP = 0, \fBH_TYPE_ARMPIT\fP = 1, \fBH_TYPE_BODY\fP = 2, \fBH_TYPE_EAR\fP = 3, \fBH_TYPE_FINGER\fP = 4, \fBH_TYPE_GASTRO_INTESTINAL_TRACT\fP = 5, \fBH_TYPE_MOUTH\fP = 6, \fBH_TYPE_RECTUM\fP = 7, \fBH_TYPE_TOE\fP = 8, \fBH_TYPE_TYMPANUM\fP = 9 }"
.br
.ti -1c
.RI "typedef enum 
.br
\fBbleHealthThermometer::h_temp_type_t\fP \fBh_temp_type_t\fP"
.br
.ti -1c
.RI "typedef struct PACK_STRUCT 
.br
\fBbleHealthThermometer::h_thermo_temp_measure_t\fP \fBh_thermo_temp_measure_t\fP"
.br
.in -1c
.PP
.in -1c
.RI "\fBPublic Member Functions\fP"
.in +1c

.in +1c
.ti -1c
.RI "\fBbleHealthThermometer\fP (\fBbleSerial\fP &ble, \fBh_temp_type_t\fP type=\fBH_TYPE_NOT_INCLUDED\fP)"
.br
.ti -1c
.RI "void \fBunit_c\fP ()"
.br
.ti -1c
.RI "void \fBunit_f\fP ()"
.br
.ti -1c
.RI "virtual void \fBmeasurementInterval\fP (uint16_t sec)"
.br
.ti -1c
.RI "virtual bool \fBsendMeasure\fP (float temp)"
.br
.ti -1c
.RI "virtual void \fBsetDynamicType\fP (\fBh_temp_type_t\fP in_type)"
.br
.ti -1c
.RI "virtual bool \fBisAvailable\fP ()"
.br
.ti -1c
.RI "bool \fBreadTemperature\fP (float &temp)"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "typedef enum \fBbleHealthThermometer::h_temp_type_t\fP \fBbleHealthThermometer::h_temp_type_t\fP"
Temperature measurement type 
.SS "typedef struct PACK_STRUCT \fBbleHealthThermometer::h_thermo_temp_measure_t\fP \fBbleHealthThermometer::h_thermo_temp_measure_t\fP"
Temperature measurement structure 
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBbleHealthThermometer::h_temp_type_t\fP"
Temperature measurement type 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIH_TYPE_NOT_INCLUDED \fP\fP
.TP
\fB\fIH_TYPE_ARMPIT \fP\fP
.TP
\fB\fIH_TYPE_BODY \fP\fP
.TP
\fB\fIH_TYPE_EAR \fP\fP
.TP
\fB\fIH_TYPE_FINGER \fP\fP
.TP
\fB\fIH_TYPE_GASTRO_INTESTINAL_TRACT \fP\fP
.TP
\fB\fIH_TYPE_MOUTH \fP\fP
.TP
\fB\fIH_TYPE_RECTUM \fP\fP
.TP
\fB\fIH_TYPE_TOE \fP\fP
.TP
\fB\fIH_TYPE_TYMPANUM \fP\fP
.SH "Constructor & Destructor Documentation"
.PP 
.SS "bleHealthThermometer::bleHealthThermometer (\fBbleSerial\fP &ble, \fBh_temp_type_t\fPtype = \fC\fBH_TYPE_NOT_INCLUDED\fP\fP)"
\fBbleHealthThermometer\fP constructor\&. 
.PP
.nf
int main() {
    \&.\&.\&.
    bleSerial ble("myBLE");
    ble\&.enable();
    \&.\&.\&.
    bleHealthThermometer ht(ble);
    ht\&.unit_c();
    ht\&.measurementInterval(3);  // set measurement interval 3 seconds
    \&.\&.\&.
    ht\&.sendMeasure(temp);
    \&.\&.\&.

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIble\fP is a \fBbleSerial\fP class object\&. 
.br
\fItype\fP is a h_temp_type_t enumeration\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void bleHealthThermometer::unit_c ()"
Set temperature unit to Celsius\&. 
.SS "void bleHealthThermometer::unit_f ()"
Set temperature unit to Fahrenheit\&. 
.SS "virtual void bleHealthThermometer::measurementInterval (uint16_tsec)\fC [virtual]\fP"
Set measurement interval (unit second, default 3 seconds) 
.PP
\fBParameters:\fP
.RS 4
\fIsec\fP is an uint16_t integer to indicate the measurement interval\&. 
.RE
.PP

.SS "virtual bool bleHealthThermometer::sendMeasure (floattemp)\fC [virtual]\fP"
send temperature measurement 
.PP
\fBParameters:\fP
.RS 4
\fItemp\fP is a floating value to indicate the temperature\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
true, if send measure successful\&. otherwise, send failed\&. 
.RE
.PP

.SS "virtual void bleHealthThermometer::setDynamicType (\fBh_temp_type_t\fPin_type)\fC [virtual]\fP"
Set the temperature dynamic type 
.PP
\fBParameters:\fP
.RS 4
\fIin_type\fP is a h_temp_type enumeration\&. 
.RE
.PP

.SS "virtual bool bleHealthThermometer::isAvailable ()\fC [virtual]\fP"
Use isAvailable to check the service whether opened by remote (App)\&. 
.PP
\fBReturns:\fP
.RS 4
true, if service is available\&. otherwise, the service is not in used\&. 
.RE
.PP

.SS "bool bleHealthThermometer::readTemperature (float &temp)"
Use readTemperature to read the temperature from BLE core sensor 
.PP
\fBParameters:\fP
.RS 4
\fItemp\fP is a floating value to receive the temperature\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
true, if read temperature successful\&. otherwise, read failed\&. 
.RE
.PP

.SH "class bleProximity"
.PP 
\fBbleProximity\fP provide 'Immediate Alert' and 'Link Loss' services\&. The \fBbleProximity\fP enables proximity monitoring between two devices\&.
.br
 See Also:
.br
 \fCProximity Profile (PXP)\fP 
.PP
Inherits \fBCPeripheral\fP\&.
.PP
.in -1c
.RI "\fBPublic Member Functions\fP"
.in +1c

.in +1c
.ti -1c
.RI "\fBbleProximity\fP (\fBbleSerial\fP &ble)"
.br
.ti -1c
.RI "virtual void \fBonAlert\fP (uint8_t level)"
.br
.ti -1c
.RI "virtual void \fBonLinkLoss\fP (uint8_t level)"
.br
.ti -1c
.RI "virtual bool \fBsendEvent\fP (uint8_t level)"
.br
.ti -1c
.RI "virtual void \fBsetTxPowerLevel\fP (int8_t dBm)"
.br
.ti -1c
.RI "virtual bool \fBisAvailable\fP ()"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "bleProximity::bleProximity (\fBbleSerial\fP &ble)"
\fBbleProximity\fP constructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIble\fP is a \fBbleSerial\fP class object\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "virtual void bleProximity::onAlert (uint8_tlevel)\fC [virtual]\fP"
onAlert event is call by BLE task\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlevel\fP is an uint8_t type value, 0=No Alert, 1=Mild Alert, 2=High Alert, 3-255 reserved\&. 
.RE
.PP
\fBRemarks:\fP
.RS 4
The onAlert will be implemented by the \fBbleProximity\fP class\&. 
.RE
.PP
\fBNote:\fP
.RS 4
The event is defined in the Immediate service of BLE\&. The Alert Level characteristic is a control point that allows a peer to command this device to alert to a given level\&. 
.RE
.PP

.SS "virtual void bleProximity::onLinkLoss (uint8_tlevel)\fC [virtual]\fP"
onLinkLoss event is call by BLE task\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlevel\fP is an uint8_t type value, 0=No Alert, 1=Mild Alert, 2=High Alert, 3-255 reserved\&. 
.RE
.PP
\fBRemarks:\fP
.RS 4
The onLinkLose will be implemented by the bleProxmity class\&. 
.RE
.PP
\fBNote:\fP
.RS 4
The event is defined in the Link-Lose service of BLE\&. The Alert Level characteristic is used to expose the current link loss alert level that is used to determine how the device alerts when the link is lost\&. 
.RE
.PP

.SS "virtual bool bleProximity::sendEvent (uint8_tlevel)\fC [virtual]\fP"
Send alert event to remote (App)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlevel\fP is an uint8_t type value to indicate BLE devie alert level\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
true, if send alert event successful\&. otherwise, if send alert event failed\&. 
.RE
.PP

.SS "virtual void bleProximity::setTxPowerLevel (int8_tdBm)\fC [virtual]\fP"
setTxPowerLevel exposes a device’s current transmit power level when in a connection\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdBm\fP is a signed integer and range from +20dBm to -120dBm 
.RE
.PP

.SS "virtual bool bleProximity::isAvailable ()\fC [virtual]\fP"
Use isAvailable to check the service whether opened by remote (App)\&. 
.PP
\fBReturns:\fP
.RS 4
true, if service is available\&. otherwise, the service is not in used\&. 
.RE
.PP

.SH "class bleSerial"
.PP 
\fBbleSerial\fP class is a ble core, and inherit from \fBCStream\fP class to provide the stream virtual functions for serial input and output\&. the \fBbleSerial\fP class also inherit from the \fBCThread\fP class and can work in background\&. 
.PP
Inherits \fBCStream\fP, and \fBCThread\fP\&.
.PP
.in -1c
.RI "\fBPublic Types\fP"
.in +1c

.in +1c
.ti -1c
.RI "enum \fBBLE_DISCONNECT_REASON_T\fP { \fBBLE_TERMINATED\fP =1, \fBBLE_UNACCEPTABLE\fP = 2 }"
.br
.ti -1c
.RI "enum \fBBLE_TX_POWER_T\fP { \fBBLE_TX_m18dBm\fP = 0, \fBBLE_TX_m12dBm\fP = 1, \fBBLE_TX_m6dBm\fP = 2, \fBBLE_TX_0dBm\fP = 3 }"
.br
.ti -1c
.RI "enum \fBBLE_ERR_T\fP { \fBBLE_ERR_OK\fP = 0, \fBBLE_ERR_HW\fP, \fBBLE_ERR_BUF\fP, \fBBLE_ERR_ACK_TIMEOUT\fP, \fBBLE_ERR_RSP_TIMEOUT\fP, \fBBLE_ERR_DAT_TIMEOUT\fP }"
.br
.in -1c
.PP
.in -1c
.RI "\fBPublic Member Functions\fP"
.in +1c

.in +1c
.ti -1c
.RI "\fBbleSerial\fP (LPCTSTR deviceName=DEF_BLE_DEVICENAME)"
.br
.RI "\fI\fBbleSerial\fP constructor with a GAT device name\&. \fP"
.ti -1c
.RI "void \fBadvertising\fP (uint16_t advInterval, int8_t txPowerLevel=DEF_BLE_TXPOWER, uint16_t connInterval=DEF_BLE_CONN_INTERVAL, uint16_t connTimeout=DEF_BLE_CONN_TIMEOUT, uint16_t manufactureData=DEF_BLE_MFG_DATA)"
.br
.ti -1c
.RI "void \fBsetup\fP (uint16_t advInterval, int8_t txPowerLevel=DEF_BLE_TXPOWER, uint16_t connInterval=DEF_BLE_CONN_INTERVAL, uint16_t connTimeout=DEF_BLE_CONN_TIMEOUT, uint16_t manufactureData=DEF_BLE_MFG_DATA)"
.br
.ti -1c
.RI "bool \fBenable\fP (uint32_t stack=128)"
.br
.ti -1c
.RI "void \fBdisable\fP ()"
.br
.ti -1c
.RI "void \fBpollInterval\fP (uint32_t ms)"
.br
.ti -1c
.RI "void \fBwatchdog\fP (uint32_t tm)"
.br
.ti -1c
.RI "bool \fBisActived\fP ()"
.br
.ti -1c
.RI "bool \fBdisconnect\fP (\fBBLE_DISCONNECT_REASON_T\fP reason=\fBBLE_TERMINATED\fP)"
.br
.ti -1c
.RI "bool \fBsetRadioTxPower\fP (\fBBLE_TX_POWER_T\fP power)"
.br
.ti -1c
.RI "uint8_t \fBgetPhyVersion\fP ()"
.br
.ti -1c
.RI "virtual void \fBonConnected\fP ()"
.br
.ti -1c
.RI "virtual void \fBonDisconnected\fP ()"
.br
.ti -1c
.RI "virtual void \fBonWatchdog\fP ()"
.br
.ti -1c
.RI "virtual void \fBonError\fP (\fBBLE_ERR_T\fP err, LPCTSTR id='bleSerial')"
.br
.ti -1c
.RI "bool \fBisAvailable\fP ()"
.br
.ti -1c
.RI "virtual int \fBreadable\fP ()"
.br
.ti -1c
.RI "virtual int \fBwriteable\fP ()"
.br
.ti -1c
.RI "virtual int \fBread\fP (void *buf, int len, bool block=true)"
.br
.ti -1c
.RI "virtual int \fBwrite\fP (const void *buf, int len, bool block=true)"
.br
.ti -1c
.RI "virtual bool \fBisConnected\fP ()"
.br
.ti -1c
.RI "virtual void \fBflush\fP ()"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBbleSerial::BLE_DISCONNECT_REASON_T\fP"
Disconnect a BLE connection with a reason\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIBLE_TERMINATED \fP\fP
Request termination of the connection with the peer device with the reason 'Remote user terminated connection'\&. 
.TP
\fB\fIBLE_UNACCEPTABLE \fP\fP
Request termination of the link with the peer device with the reason 'Unacceptable connection timing'\&. 
.SS "enum \fBbleSerial::BLE_TX_POWER_T\fP"
setTxPower sets the output power level of the Bluetooth Low Energy radio\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIBLE_TX_m18dBm \fP\fP
-18dBm (Low) 
.TP
\fB\fIBLE_TX_m12dBm \fP\fP
-12dBm 
.TP
\fB\fIBLE_TX_m6dBm \fP\fP
-6dBm 
.TP
\fB\fIBLE_TX_0dBm \fP\fP
0dBm (High) 
.SS "enum \fBbleSerial::BLE_ERR_T\fP"
BLE error code 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIBLE_ERR_OK \fP\fP
.TP
\fB\fIBLE_ERR_HW \fP\fP
Hardware Error\&. 
.TP
\fB\fIBLE_ERR_BUF \fP\fP
Sender queue buffer was full\&. 
.TP
\fB\fIBLE_ERR_ACK_TIMEOUT \fP\fP
ACK timeout\&. 
.TP
\fB\fIBLE_ERR_RSP_TIMEOUT \fP\fP
Response timeout\&. 
.TP
\fB\fIBLE_ERR_DAT_TIMEOUT \fP\fP
Core data timeout\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "bleSerial::bleSerial (LPCTSTRdeviceName = \fCDEF_BLE_DEVICENAME\fP)"

.PP
\fBbleSerial\fP constructor with a GAT device name\&. \fBbleSerial\fP constructor 
.PP
.nf
int main() {
        \&.\&.\&.
        bleSerial ble("myBLE");
        ble\&.advertising(100);   // set advertising interval 100ms
        ble\&.enable();
        \&.\&.\&.
        \&.\&.\&.

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIdeviceName\fP point to a LPCTSTR string to indicate the GAT device name of Bluetooth\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void bleSerial::advertising (uint16_tadvInterval, int8_ttxPowerLevel = \fCDEF_BLE_TXPOWER\fP, uint16_tconnInterval = \fCDEF_BLE_CONN_INTERVAL\fP, uint16_tconnTimeout = \fCDEF_BLE_CONN_TIMEOUT\fP, uint16_tmanufactureData = \fCDEF_BLE_MFG_DATA\fP)"
Broadcast the advertising message when device is not in BLE connection\&. 
.PP
\fBParameters:\fP
.RS 4
\fIadvInterval\fP To broadcast the advertising message with the interval time in millisecond\&. 
.br
\fItxPowerLevel\fP To expose the 'TxPowerLevel' on the advertising message\&. 
.br
\fIconnInterval\fP To expose the 'connection interval' on the advertising message\&. 
.br
\fIconnTimeout\fP To expose the 'connection timeout' on the advertising message\&. 
.br
\fImanufactureData\fP To expose the 'Manufacture Data' on the advertising message\&. 
.RE
.PP
\fBRemarks:\fP
.RS 4
advertising(\&.\&.\&.) have to call before the \fBenable()\fP member\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBbleSerial()\fP 
.RE
.PP

.SS "void bleSerial::setup (uint16_tadvInterval, int8_ttxPowerLevel = \fCDEF_BLE_TXPOWER\fP, uint16_tconnInterval = \fCDEF_BLE_CONN_INTERVAL\fP, uint16_tconnTimeout = \fCDEF_BLE_CONN_TIMEOUT\fP, uint16_tmanufactureData = \fCDEF_BLE_MFG_DATA\fP)\fC [inline]\fP"
An inline function redirect to \fBadvertising()\fP member function\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBadvertising\fP 
.RE
.PP

.SS "bool bleSerial::enable (uint32_tstack = \fC128\fP)"
The enable member is to call the \fBCThread\fP:\fBstart()\fP to start the ble engine task\&. 
.PP
.nf
#include "class/ble_serial\&.h"
int main() {
        bleSerial ble("myBLE");
        ble\&.enable();   // to start the BLE core and Task\&.
        \&.\&.\&.
        \&.\&.\&.
}

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIstack\fP To indicate the stack size of BLE task\&. default is 128 bytes\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
true if start the ble task successful, otherwise is failed\&. 
.RE
.PP

.SS "void bleSerial::disable ()"
The disable member is to suspend the bleSerail task\&. 
.PP
\fBNote:\fP
.RS 4
Call enable member to resume the bleSerail task\&. 
.RE
.PP

.SS "void bleSerial::pollInterval (uint32_tms)"
Poll the BLE core with the interval time in milliseconds\&. 
.PP
\fBParameters:\fP
.RS 4
\fIms\fP A millisecond value\&. 
.RE
.PP
\fBNote:\fP
.RS 4
The member is a optional function, and default is 50ms\&. 
.RE
.PP

.SS "void bleSerial::watchdog (uint32_ttm)"
Enable a watchdog on a BLE connection\&. The watchdog feature will cause the BLE core reset when remote (App) crash or lose the connection\&. 
.PP
\fBParameters:\fP
.RS 4
\fItm\fP A timeout value in millisecond, recommend value is 500~30000\&. If set the tm to zero, it is meant to disable the watchdog\&. 
.RE
.PP
\fBNote:\fP
.RS 4
The member is an optional function, and default is 10,000ms (10 seconds)\&. 
.RE
.PP

.SS "bool bleSerial::isActived ()"
To check that radio is activated before the radio becomes active\&. 
.PP
\fBReturns:\fP
.RS 4
true if the radio is activated, otherwise if the radio is inactivated\&. 
.RE
.PP

.SS "bool bleSerial::disconnect (\fBBLE_DISCONNECT_REASON_T\fPreason = \fC\fBBLE_TERMINATED\fP\fP)"
To disconnect current connection with a reason\&. 
.PP
\fBParameters:\fP
.RS 4
\fIreason\fP is a BLE_DISCONNECT_REASON_T enumeration\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
true if disconnect successful, otherwise, disconnect failed\&. 
.RE
.PP

.SS "bool bleSerial::setRadioTxPower (\fBBLE_TX_POWER_T\fPpower)"
Set the ouptut power level of the Bluetooth Low Energy radio\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpower\fP is a BLE_TX_POWER_T enumeration\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
true if set radio power successful, otherwise is failed\&. 
.RE
.PP

.SS "uint8_t bleSerial::getPhyVersion ()"
Get BLE core hardware version\&. 
.PP
\fBReturns:\fP
.RS 4
An uint8_t type value\&. 
.RE
.PP

.SS "virtual void bleSerial::onConnected ()\fC [virtual]\fP"
An virtual function call by BLE task and occurs when remote (App) is already to connect the BLE device\&. 
.PP
\fBRemarks:\fP
.RS 4
To override the virtual, the onConnection of child have to call the onConnection of supper class\&. 
.PP
.nf
class myBle: public bleSerial {
public:
        // override the onConnected() virtual function
        virtual onConnected() {
            bleSerial::onConnection();      // call to parent class

            // your onConnection event code here:
            \&.\&.\&.
            \&.\&.\&.
        }
    };

.fi
.PP
 
.RE
.PP

.SS "virtual void bleSerial::onDisconnected ()\fC [virtual]\fP"
An virtual function call by BLE task and occurs when remote (App) is already to disconnect the BLE device\&. 
.PP
\fBRemarks:\fP
.RS 4
To override the virtual, the onDisconnection of child have to call the onDisconnection of parent class\&. 
.PP
.nf
class myBle: public bleSerial {
public:
        // override the onConnected() virtual function
        virtual onDisconnected() {
            bleSerial::onDisconnection();   // call to parent class

            // your onDisonnection event code here:
            \&.\&.\&.
            \&.\&.\&.
        }
    };

.fi
.PP
 
.RE
.PP

.SS "virtual void bleSerial::onWatchdog ()\fC [virtual]\fP"
An virtual function call by BLE task and occurs when a watchdog timeout on a connection\&. 
.PP
\fBRemarks:\fP
.RS 4
The onWatchdog member will call the reset() member function to reset the BLE core\&. 
.RE
.PP

.SS "virtual void bleSerial::onError (\fBBLE_ERR_T\fPerr, LPCTSTRid = \fC'bleSerial'\fP)\fC [inline]\fP, \fC [virtual]\fP"
An virtual function call by BLE task and occurs when a BLE hardware error\&. 
.PP
\fBParameters:\fP
.RS 4
\fIerror\fP A BLE_ERR_T enumeration\&. 
.br
\fIid\fP A string to a class name\&. (for debug) 
.RE
.PP
\fBNote:\fP
.RS 4
The onError event is a empty function in \fBbleSerial\fP class\&. 
.RE
.PP

.SS "bool bleSerial::isAvailable ()\fC [inline]\fP"
Use isAvailable to check the service whether opened by remote (App)\&. 
.PP
\fBReturns:\fP
.RS 4
true, if service is available\&. otherwise, the service is not in used\&. 
.RE
.PP
\fBNote:\fP
.RS 4
This isAvailable member is an inline function to redirect to the \fBwriteable()\fP member\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBwriteable\fP 
.RE
.PP

.SS "virtual int bleSerial::readable ()\fC [virtual]\fP"
Determine how many data bytes are available to read\&. 
.PP
\fBReturns:\fP
.RS 4
A value to indicate how many data byte is available in the input buffer\&. 
.RE
.PP
\fBRemarks:\fP
.RS 4
the pure virtual function have to implement by child class\&. 
.RE
.PP

.PP
Reimplemented from \fBCStream\fP\&.
.SS "virtual int bleSerial::writeable ()\fC [virtual]\fP"

.SS "virtual int bleSerial::read (void *buf, intlen, boolblock = \fCtrue\fP)\fC [virtual]\fP"

.SS "virtual int bleSerial::write (const void *buf, intlen, boolblock = \fCtrue\fP)\fC [virtual]\fP"

.SS "virtual bool bleSerial::isConnected ()\fC [virtual]\fP"

.SS "virtual void bleSerial::flush ()\fC [virtual]\fP"

.SH "Author"
.PP 
Generated automatically by Doxygen for uCXpresso\&.BLE from the source code\&.
